struct ModelMatUBO {
	alignas(16) glm::mat4 model[NUM_OF_ID];
};

struct SceneMatUBO {
	alignas(16) glm::mat4 view;
	alignas(16) glm::mat4 proj;
};


class Base {

public:
	Base() {
		initWindow();
		registerInputEvents();
	}

	~Base() {
		vkDeviceWaitIdle(device);
		cleanup();
	}

	void initVulkan();
	void initImGui();

	void pollWindowEvent();
	int windowShouldClose();
	void drawImGuiFrame();
	void drawFrame();

	void vSync();
	void updateClock();		// call this after vSync()
	void updateCamera();

	void resetMouseInputContext();

	void resetModelMat();

	void addVertex(Vertex vertex);
	void addVertices(const std::vector<Vertex>& vertices);
	void addIndex(uint32_t index);
	void addIndices(const std::vector<uint32_t>& indices);

	void setAnimator(std::shared_ptr<Animator> anim);
};
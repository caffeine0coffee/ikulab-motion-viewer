# User Code ----------

// ImGui status
bool showDemoWindow = false;
bool windowSizeInitialized = false;


# Vulkan Helper ----------
AppEngineでのみ使用するものはAppEngineのprivateメンバにする

struct QueueFamilyIndices
struct SwapChainSupportDetails

std::vector<const char*> getRequiredExtensions();
void pickPhysicalDevice();
bool isDeviceSuitable(VkPhysicalDevice device);
bool checkValidationLayerSupport();
bool checkDeviceExtensionSupport(VkPhysicalDevice device);

QueueFamilyIndices findQueueFamilies(VkPhysicalDevice device);
SwapChainSupportDetails querySwapChainSupport(VkPhysicalDevice device);
uint32_t findMemoryType(uint32_t typeFilter, VkMemoryPropertyFlags properties);

VkSurfaceFormatKHR chooseSwapSurfaceFormat(const std::vector<VkSurfaceFormatKHR>& availableFormats);
VkPresentModeKHR chooseSwapChainPresentMode(const std::vector<VkPresentModeKHR>& availablePresentModes);
VkExtent2D chooseSwapExtent(const VkSurfaceCapabilitiesKHR& capabilities);
 
void createBuffer(...);
void createImage(...);
VkImageView createImageView(...);

void copyBuffer(...);
void copyBufferToImage(...);

void transitionImageLayout();

VkCommandBuffer beginSingleTimeCommands();
void endSingleTimeCommands(VkCommandBuffer commandBuffer);

VkFormat findSupportedFormat();
VkFormat findDepthFormat();
bool hasStencilComponent(VkFormat format);

VkSampleCountFlagBits getMaxUsableSampleCount();

static std::vector<char> readFile(const std::string& fileName);


# Application Engine ----------

DebugMessageUtil

std::chrono::_V2::system_clock::time_point startTime;
std::chrono::_V2::system_clock::time_point currentTime;
float secondsFromStart;
float fps = 60.0;

// GLFW event callbacks ---
static void cursorPositionCallback(GLFWwindow* window, double xPos, double yPos);
static void mouseButtonCallback(GLFWwindow* window, int button, int action, int mods);
static void scrollCallback(GLFWwindow* window, double xOffset, double yOffset);
static void keyCallback(GLFWwindow* window, int key, int scanCode, int action, int mods);
void registerInputEvents();
// ---

	# Native Window -----

	void initWindow();

	GLFWWindow window
	bool framebufferResized = false;
	VkSurfaceKHR surface;

	int windowWidth = 0;
	int windowHeight = 0;

	void createSurface();
	void createSwapChain();
	void cleanupSwapChain();
	void recreateSwapChain();

	VkSwapchainKHR swapChain;
	std::vector<VkImage> swapChainImages;
	VkFormat swapChainImageFormat;
	VkExtent2D swapChainExtent;
	std::vector<VkImageView> swapChainImageViews;

	struct MouseInputContext
	struct KeyboardInputContext
	struct CameraContext

	uint32_t currentFrame = 0;


# Render Engine ----------

VkPhysicalDevice physicalDevice = VK_NULL_HANDLE;
VkInstance instance;
VkDevice device;
VkQueue graphicsQueue;
VkQueue presentQueue;

void createLogicalDevice();

void recordCommandBuffer(VkCommandBuffer commandBuffer, uint32_t imageIndex);

CommandPool
SyncObjects


# Ui Engine ----------

VkDescriptorPool imguiDescriptorPool;


# Render Content ----------

ImageViews
VertexBuffer
IndexBuffer
UniformBuffer
DescriptorSet


# Render Target ----------

GraphicsPipelines
GraphicsPipelineLayouts
ShaderModules <- 保存する必要は無い
RenderPass
FrameBuffer
CommandBuffer
DescriptorSetLayout
DescriptorPool
Attachments (AttachmentDescriptions)
